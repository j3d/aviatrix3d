<html>
<body>
File loader for the Discreet 3DS MAX application (.3ds file format).
<P>


File loaders are built over the top of the basic parsing framework defined in
the {@link org.j3d.loaders.discreet} package to handle the parsing.

<h3>Implementation Notes</h3>

<h4>Material Library</h4>

Each {@link org.j3d.loaders.discreet.MaterialBlock} instance is transformed to
an {@link org.j3d.aviatrix3d.Appearance} instance in order to hold all of the
information provided. The colours are directly transformed to a Material instance
and texture maps are set into a set of texture units.
<p>

Separate specular colour is always enabled and a common PolygonAttributes is
used for this whenever there is no request for two-sided lighting. If two-sided
lighting is requested, then a shared instance of another PolygonAttributes is
used.

<h4>Texture Handling</h4>

Textures are a large part of most max files, but still defined externally.
However, we must at least set up the appropriate structures internally so that
the externally defined mapping can point to the right object.
<p>

The texture units are mapped in the following order for multitexturing so that
a somewhat correct visual result is provided.
<ol>
<li><i>Bump Map</i>: This will be set to modulate with the underlying object's
    surface colour. Note that 3DS uses a displacement map, not a normal map for
    this file. Therefore, when loading an external file, you need to take the
    source image and convert from a displacement map (typically a greyscale
    indicating displacement from the surface) to a normal map as required by
    realtime 3D multitexturing</li>
<li><i>Opacity map</i>: Base colour values will be a simple pass-through.
    Alpha of the source objects will be replaced by this object's alpha channel.
    If a greyscale image, then treat it as an alpha map, not luminence or
    intensity</li>
<li><i>Texture map</i>: Modulate this will all the previous maps</li>
<li><i>Reflection map</i>: Not sure, but this is typically a cubic environment
    map. That is typically used as the texture map, rather than in addition to
    it. Will set up as a separate pass and modulate it with the previous texture
    unit</li>
<li><i>Specular map</i>: Apply the map as an additive map to the previous map.
    If the source map is a greyscale, treat it as a luminance map.</li>
</ol>

Maps that are not defined by the file will be left out of the order. When loading
the external files, the user will be responsible for creating the appropriate
{@link org.j3d.aviatrix3d.TextureComponent} instance and setting the right
format when using the setImages() call on the provided
{@link org.j3d.aviatrix3d.Texture} object.
<p>

Note that in some cases, depending on the format of the maps provided, you may
need to find the parent texture object and mess with the texture attributes to
get the right combine mode happening.

<h4>Name mapping</h3>

For the material and keyframe blocks, the standard names provided in the file
are used. However, for the object block, where the name holds viewpoints,
lights and geometry data, we need to generate unambiguous names. To do this,
we take the base name then add on two suffixes to indicate light/mesh/camera
and then the position in the file (as declared). So, say an object is created
with the name &quot;head&quot;, which had a viewpoint and light associated with
it, the following 3 names would reference the corresponding Aviatrx3D objects:
<p>
<code>head-mesh-0</code> org.j3d.aviatrix3d.TransformGroup<br>
<code>head-camera-0</code> org.j3d.aviatrix3d.Viewpoint<br>
<code>head-light-0</code> org.j3d.aviatrix3d.Light<br>
<p>

<h3>Limitations</h3>

The implementation does not handle the animation keyframe, fog, camera or
background data currently.

<h3>Required Support JARS and packages</h3>

<ul>
<li>{@link org.j3d.loaders.discreet}, <code>j3d-org-loaders-3ds.jar</code></li>
<li>{@link org.j3d.renderer.aviatrix3d.loader}, <code>aviatix3d-all.jar</code></li>
</ul>

</body>
</html>
